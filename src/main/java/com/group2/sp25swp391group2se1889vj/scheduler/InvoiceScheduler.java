package com.group2.sp25swp391group2se1889vj.scheduler;

import com.group2.sp25swp391group2se1889vj.controller.WebSocketController;
import com.group2.sp25swp391group2se1889vj.entity.Customer;
import com.group2.sp25swp391group2se1889vj.entity.Debt;
import com.group2.sp25swp391group2se1889vj.entity.Invoice;
import com.group2.sp25swp391group2se1889vj.entity.InvoiceItem;
import com.group2.sp25swp391group2se1889vj.enums.DebtType;
import com.group2.sp25swp391group2se1889vj.enums.InvoiceType;
import com.group2.sp25swp391group2se1889vj.repository.CustomerRepository;
import com.group2.sp25swp391group2se1889vj.repository.DebtRepository;
import com.group2.sp25swp391group2se1889vj.repository.InvoiceRepository;
import com.group2.sp25swp391group2se1889vj.repository.ProductRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

@Component
@RequiredArgsConstructor
@Slf4j
@Transactional
public class InvoiceScheduler {
    private final InvoiceRepository invoiceRepository;
    private final DebtRepository debtRepository;
    private final ProductRepository productRepository;
    private final WebSocketController webSocketController;

    // ch·∫°y sau m·ªëi 5 gi√¢y
    @Transactional
    @Scheduled(fixedRate = 10000)
    public void processInvoice() {
        log.info("Invoice processed");
        List<Invoice> pendingInvoices = invoiceRepository.findInvoiceByIsProcessedIsFalse();
        for (Invoice invoice : pendingInvoices) {
            try {
                if (invoice.getType() == InvoiceType.PURCHASE) {
                    log.info("ƒêang x·ª≠ l√Ω h√≥a ƒë∆°n nh·∫≠p h√†ng: {}", invoice.getId());
                    processInvoicePurchase(invoice);
                    invoice.setProcessed(true);
                    invoiceRepository.save(invoice);
                    webSocketController.sendInvoiceStatus(invoice.getId(), "SUCCESS", "H√≥a ƒë∆°n nh·∫≠p h√†ng ƒë√£ x·ª≠ l√Ω", invoice.getCreatedBy().getUsername());
                }
            } catch (Exception e) {
                log.error(e.getMessage());
                log.error("Error processing invoice: {}", invoice.getId());
            }
        }

    }

    @Transactional
    protected void processInvoicePurchase(Invoice invoice) {
        // 1. T√≠nh t·ªïng ti·ªÅn h√†ng nh·∫≠p t·ª´ kh√°ch h√†ng
        BigDecimal totalPrice = invoice.getInvoiceItems().stream()
                .map(InvoiceItem::getPayable)
                .reduce(BigDecimal.ZERO, BigDecimal::add);
        invoice.setTotalPrice(totalPrice);

        // 2. L·∫•y th√¥ng tin kh√°ch h√†ng v√† s·ªë d∆∞ hi·ªán t·∫°i
        Customer customer = invoice.getCustomer();
        BigDecimal customerBalance = customer.getBalance();
        invoice.setCustomerBalance(customerBalance);

        // 3. T·ªïng ti·ªÅn ph·∫£i tr·∫£ cho kh√°ch h√†ng (bao g·ªìm s·ªë d∆∞ tr∆∞·ªõc ƒë√≥)
        BigDecimal totalPayable = totalPrice.add(customerBalance);
        invoice.setTotalPayable(totalPayable);

        // 4. S·ªë ti·ªÅn ƒë√£ tr·∫£ th·ª±c t·∫ø
        BigDecimal totalPaid = invoice.getTotalPaid();

        // 5. T√≠nh t·ªïng n·ª£ c√≤n l·∫°i sau khi tr·∫£
        BigDecimal totalDebt = totalPayable.subtract(totalPaid);
        invoice.setTotalDebt(totalDebt);

        // 6. X·ª≠ l√Ω c√¥ng n·ª£ theo t·ª´ng case
        if (customerBalance.compareTo(BigDecimal.ZERO) == 0) {
            // üü¢ CASE: S·ªê D∆Ø KH√ÅCH H√ÄNG = 0
            if (totalPaid.compareTo(totalPrice) < 0) {
                // Tr·∫£ kh√¥ng ƒë·ªß -> C·ª≠a h√†ng n·ª£ kh√°ch (SHOP_BORROW)
                createDebt(invoice, DebtType.SHOP_BORROW, totalPrice.subtract(totalPaid), "C·ª≠a h√†ng n·ª£ kh√°ch sau nh·∫≠p h√†ng");
            } else if (totalPaid.compareTo(totalPrice) > 0) {
                // Tr·∫£ d∆∞ -> Kh√°ch n·ª£ c·ª≠a h√†ng (CUSTOMER_BORROW)
                createDebt(invoice, DebtType.CUSTOMER_BORROW, totalPaid.subtract(totalPrice), "Kh√°ch n·ª£ c·ª≠a h√†ng sau nh·∫≠p h√†ng");
            }
        } else if (customerBalance.compareTo(BigDecimal.ZERO) > 0) {
            // üü¢ CASE: S·ªê D∆Ø KH√ÅCH H√ÄNG > 0
            if (totalPaid.compareTo(totalPrice) == 0) {
                // Tr·∫£ ƒë√∫ng s·ªë ti·ªÅn h√†ng -> Kh√¥ng t·∫°o c√¥ng n·ª£
                return;
            } else if (totalPaid.compareTo(totalPrice.add(customerBalance)) == 0) {
                // Tr·∫£ ƒë√∫ng c·∫£ ti·ªÅn h√†ng v√† s·ªë d∆∞ -> C·ª≠a h√†ng tr·∫£ n·ª£ kh√°ch (SHOP_REPAY)
                createDebt(invoice, DebtType.SHOP_REPAY, customerBalance, "C·ª≠a h√†ng tr·∫£ n·ª£ kh√°ch");
            } else if (totalPaid.compareTo(totalPrice) > 0 && totalPaid.compareTo(totalPrice.add(customerBalance)) < 0) {
                // Tr·∫£ d∆∞ nh∆∞ng ch∆∞a h·∫øt s·ªë d∆∞ -> C·ª≠a h√†ng tr·∫£ n·ª£ kh√°ch m·ªôt ph·∫ßn
                createDebt(invoice, DebtType.SHOP_REPAY, totalPaid.subtract(totalPrice), "C·ª≠a h√†ng tr·∫£ m·ªôt ph·∫ßn n·ª£ kh√°ch");
            } else if (totalPaid.compareTo(totalPrice.add(customerBalance)) > 0) {
                // Tr·∫£ d∆∞ qu√° m·ª©c -> Tr·∫£ h·∫øt n·ª£ kh√°ch v√† kh√°ch l·∫°i n·ª£ c·ª≠a h√†ng
                createDebt(invoice, DebtType.SHOP_REPAY, customerBalance, "C·ª≠a h√†ng tr·∫£ n·ª£ kh√°ch");
                createDebt(invoice, DebtType.CUSTOMER_BORROW, totalPaid.subtract(totalPrice).subtract(customerBalance), "Kh√°ch n·ª£ c·ª≠a h√†ng sau tr·∫£ d∆∞");
            } else if (totalPaid.compareTo(totalPrice) < 0) {
                // Tr·∫£ thi·∫øu -> C·ª≠a h√†ng ti·∫øp t·ª•c n·ª£ kh√°ch
                createDebt(invoice, DebtType.SHOP_BORROW, totalPrice.subtract(totalPaid), "C·ª≠a h√†ng ti·∫øp t·ª•c n·ª£ kh√°ch");
            }
        } else {
            // üü¢ CASE: S·ªê D∆Ø KH√ÅCH H√ÄNG < 0
            if (totalPaid.compareTo(totalPrice) == 0) {
                // Tr·∫£ ƒë√∫ng s·ªë ti·ªÅn h√†ng -> Kh√¥ng t·∫°o c√¥ng n·ª£
                return;
            } else if (totalPaid.compareTo(totalPrice.add(customerBalance)) == 0) {
                // Tr·∫£ ƒë·ªß c·∫£ ti·ªÅn h√†ng v√† s·ªë d∆∞ √¢m -> Kh√°ch tr·∫£ n·ª£ c·ª≠a h√†ng
                createDebt(invoice, DebtType.CUSTOMER_REPAY, customerBalance.abs(), "Kh√°ch tr·∫£ n·ª£ c·ª≠a h√†ng");
            } else if (totalPaid.compareTo(totalPrice) > 0 && totalPaid.compareTo(totalPrice.add(customerBalance)) < 0) {
                // Tr·∫£ d∆∞ nh∆∞ng ch∆∞a ƒë·ªß ƒë·ªÉ x√≥a n·ª£ -> Kh√°ch tr·∫£ n·ª£ m·ªôt ph·∫ßn
                createDebt(invoice, DebtType.CUSTOMER_REPAY, totalPaid.subtract(totalPrice), "Kh√°ch tr·∫£ m·ªôt ph·∫ßn n·ª£ c·ª≠a h√†ng");
            } else if (totalPaid.compareTo(totalPrice.add(customerBalance)) > 0) {
                // Tr·∫£ d∆∞ qu√° m·ª©c -> X√≥a n·ª£ kh√°ch v√† c·ª≠a h√†ng l·∫°i n·ª£ kh√°ch
                createDebt(invoice, DebtType.CUSTOMER_REPAY, customerBalance.abs(), "Kh√°ch tr·∫£ h·∫øt n·ª£ c·ª≠a h√†ng");
                createDebt(invoice, DebtType.SHOP_REPAY, totalPaid.subtract(totalPrice).subtract(customerBalance.abs()), "C·ª≠a h√†ng tr·∫£ n·ª£ kh√°ch sau thanh to√°n");
            } else if (totalPaid.compareTo(totalPrice) < 0) {
                // Tr·∫£ kh√¥ng ƒë·ªß -> Kh√°ch ti·∫øp t·ª•c n·ª£ c·ª≠a h√†ng
                createDebt(invoice, DebtType.CUSTOMER_BORROW, totalPrice.subtract(totalPaid), "Kh√°ch ti·∫øp t·ª•c n·ª£ c·ª≠a h√†ng");
            }
        }

        // c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
        for (InvoiceItem item : invoice.getInvoiceItems()) {
            log.info("C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m: {} - {}", item.getProduct().getName(), item.getQuantity());
            productRepository.increaseStockQuantity(item.getProduct().getId(), item.getQuantity() * item.getProductPackage().getWeight());
        }
    }

    /**
     * Ph∆∞∆°ng th·ª©c t·∫°o b·∫£n ghi n·ª£
     */
    private void createDebt(Invoice invoice, DebtType type, BigDecimal amount, String description) {
        if (amount.compareTo(BigDecimal.ZERO) <= 0) return; // Kh√¥ng t·∫°o n·∫øu s·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá

        Debt debt = new Debt();
        debt.setType(type);
        debt.setCustomer(invoice.getCustomer());
        debt.setAmount(amount);
        debt.setDebtAt(LocalDateTime.now());
        debt.setDescription(description + " #" + invoice.getId());
        debt.setProcessed(false);
        debt.setSuccess(false);
        debtRepository.save(debt);
    }


}
